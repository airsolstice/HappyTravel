package com.admin.ht.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.admin.ht.model.RecentMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECENT_MSG".
*/
public class RecentMsgDao extends AbstractDao<RecentMsg, Long> {

    public static final String TABLENAME = "RECENT_MSG";

    /**
     * Properties of entity RecentMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property No = new Property(0, Long.class, "no", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Owner = new Property(2, String.class, "owner", false, "OWNER");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property Count = new Property(5, int.class, "count", false, "COUNT");
        public final static Property Note = new Property(6, String.class, "note", false, "NOTE");
        public final static Property Time = new Property(7, java.util.Date.class, "time", false, "TIME");
    }


    public RecentMsgDao(DaoConfig config) {
        super(config);
    }
    
    public RecentMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENT_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: no
                "\"ID\" TEXT," + // 1: id
                "\"OWNER\" TEXT," + // 2: owner
                "\"NAME\" TEXT," + // 3: name
                "\"URL\" TEXT," + // 4: url
                "\"COUNT\" INTEGER NOT NULL ," + // 5: count
                "\"NOTE\" TEXT," + // 6: note
                "\"TIME\" INTEGER);"); // 7: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENT_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentMsg entity) {
        stmt.clearBindings();
 
        Long no = entity.getNo();
        if (no != null) {
            stmt.bindLong(1, no);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(3, owner);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
        stmt.bindLong(6, entity.getCount());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(7, note);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(8, time.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentMsg entity) {
        stmt.clearBindings();
 
        Long no = entity.getNo();
        if (no != null) {
            stmt.bindLong(1, no);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String owner = entity.getOwner();
        if (owner != null) {
            stmt.bindString(3, owner);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
        stmt.bindLong(6, entity.getCount());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(7, note);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(8, time.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecentMsg readEntity(Cursor cursor, int offset) {
        RecentMsg entity = new RecentMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // no
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // owner
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.getInt(offset + 5), // count
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // note
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentMsg entity, int offset) {
        entity.setNo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOwner(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCount(cursor.getInt(offset + 5));
        entity.setNote(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecentMsg entity, long rowId) {
        entity.setNo(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecentMsg entity) {
        if(entity != null) {
            return entity.getNo();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentMsg entity) {
        return entity.getNo() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
